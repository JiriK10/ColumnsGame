@page "/game"
@using ColumnsGame.Constants;
@using ColumnsGame.Enums;
@using ColumnsGame.Models;
@inject NavigationManager Navigation
@inject ColumnsGame.Models.IColumnFallManager ColumnFallManager;
@inject ColumnsGame.Models.IGameArea GameAreaModel;
@inject ColumnsGame.Models.IHighScores HighScores;

<PageTitle>Columns 🎮</PageTitle>

<div class="area d-flex flex-column align-items-center" @ref="focusArea" tabindex="0" @onkeydown="@KeyDown">
    <div class="score mb-2">
        Score: @score
    </div>
    <div class="mb-1">
        @for (int i = 0; i < GameParameters.PlayerColumnSize; i++)
        {
            <GameAreaTileComponent Tile="@ColumnFallManager.NextColumn[i]" IsColumn />
        }
    </div>
    <GameAreaComponent Tiles="@GameAreaModel.Tiles" Column="@(evaluating ? null : ColumnFallManager.CurrentColumn)" ColumnPosition="@ColumnFallManager.ColumnPosition" />
    <div class="instructions text-center">
        <i class="fa-solid fa-gamepad" />
        Use arrows and spacebar
    </div>
</div>

@code {
    private ElementReference focusArea;

    private bool evaluating = false;

    private DateTime? startTime = null;
    private int score  = 0;

    protected override void OnInitialized()
    {
        score = 0;
        startTime = DateTime.Now;

        GameAreaModel.InitTiles();

        ColumnFallManager.OnFall += (sender, e) => StateHasChanged();
        ColumnFallManager.OnFallCompleted += EvaluateFall;
        ColumnFallManager.Start(GetGameSpeed());
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        focusArea.FocusAsync();
        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Keyboard events handler
    /// </summary>
    private void KeyDown(KeyboardEventArgs e)
    {
        if (evaluating)
            return;

        if (e.Code == "Space")
        {
            ColumnFallManager.RotateCurrentColumn();
            return;
        }

        MoveDirection? direction = e.Code switch
        {
            "ArrowLeft" => MoveDirection.Left,
            "ArrowRight" => MoveDirection.Right,
            "ArrowDown" => MoveDirection.Down,
            _ => null,
        };
        if (direction != null)
        {
            ColumnFallManager.MoveCurrentColumn(direction.Value);
        }
    }

    /// <summary>
    /// Generates new random column
    /// </summary>
    private int GetGameSpeed() => Math.Max(GameParameters.GameSpeedFastestAllowed, GameParameters.GameSpeedStart - score * GameParameters.GameSpeedUpCoefficient);

    /// <summary>
    /// Animated evaluation of game area after column fall is finished
    /// </summary>
    private void EvaluateFall(object? sender, EventArgs e)
    {
        evaluating = true;
        Task.Run(async () =>
        {
            bool stopGame = !GameAreaModel.SetColumn(ColumnFallManager.ColumnPosition, ColumnFallManager.CurrentColumn);
            StateHasChanged();

            if (stopGame)
            {
                EvaluateFall_Stop();
            }
            else
            {
                await EvaluateFall_NextFall();
                evaluating = false;
                StateHasChanged();
            }
        });
    }

    /// <summary>
    /// EvaluateFall - Game over
    /// </summary>
    private void EvaluateFall_Stop()
    {
        string uri = score > 0 && HighScores.IsHighScore(score) ? $"/new-high-score/{score}" : "/";
        Navigation.NavigateTo(uri);
    }

    /// <summary>
    /// EvaluateFall - Game continues to next rounds
    /// </summary>
    private async Task EvaluateFall_NextFall()
    {
        int lastRoundScore = 1;
        while (lastRoundScore > 0)
        {
            lastRoundScore = 0;

            int evaluatedScore = 1;
            while (evaluatedScore > 0)
            {
                evaluatedScore = GameAreaModel.Evaluate();
                if (evaluatedScore > 0)
                {
                    score += evaluatedScore;
                    lastRoundScore += evaluatedScore;
                    StateHasChanged();
                    await Task.Delay(GameParameters.DelayBetweenEvaluationSteps);
                }
            }

            if (lastRoundScore > 0 && GameAreaModel.ShakeDown())
            {
                StateHasChanged();
                await Task.Delay(GameParameters.DelayBetweenEvaluationSteps);
            }
            else
            {
                lastRoundScore = 0;
            }
        }
        ColumnFallManager.Start(GetGameSpeed());
    }
}
